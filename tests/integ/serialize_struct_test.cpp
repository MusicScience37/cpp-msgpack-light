/*
 * Copyright 2024 MusicScience37 (Kenta Kabashima)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * \file
 * \brief Test to serialize struct.
 */

/*
 * This source is automatically generated from serialize_struct_test.cpp.jinja.
 * Do not edit this file directly.
 */

#include <string>
#include <unordered_map>
#include <vector>

#include <catch2/catch_test_macros.hpp>
#include <msgpack.hpp>

#include "example_struct.h"
#include "msgpack_light/binary.h"
#include "msgpack_light/serialize.h"

TEST_CASE("serialize struct into maps") {
    using msgpack_light::binary;
    using msgpack_light::serialize;
    using msgpack_light_test::map_example_struct1;
    using msgpack_light_test::map_example_struct10;
    using msgpack_light_test::map_example_struct11;
    using msgpack_light_test::map_example_struct12;
    using msgpack_light_test::map_example_struct13;
    using msgpack_light_test::map_example_struct14;
    using msgpack_light_test::map_example_struct15;
    using msgpack_light_test::map_example_struct2;
    using msgpack_light_test::map_example_struct3;
    using msgpack_light_test::map_example_struct4;
    using msgpack_light_test::map_example_struct5;
    using msgpack_light_test::map_example_struct6;
    using msgpack_light_test::map_example_struct7;
    using msgpack_light_test::map_example_struct8;
    using msgpack_light_test::map_example_struct9;

    SECTION("serialize 1 parameter") {
        const auto value = map_example_struct1{1};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 1;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }

    SECTION("serialize 2 parameter") {
        const auto value = map_example_struct2{1, 2};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 2;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }

    SECTION("serialize 3 parameter") {
        const auto value = map_example_struct3{1, 2, 3};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 3;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }

    SECTION("serialize 4 parameter") {
        const auto value = map_example_struct4{1, 2, 3, 4};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 4;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }

    SECTION("serialize 5 parameter") {
        const auto value = map_example_struct5{1, 2, 3, 4, 5};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 5;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }

    SECTION("serialize 6 parameter") {
        const auto value = map_example_struct6{1, 2, 3, 4, 5, 6};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 6;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }

    SECTION("serialize 7 parameter") {
        const auto value = map_example_struct7{1, 2, 3, 4, 5, 6, 7};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 7;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }

    SECTION("serialize 8 parameter") {
        const auto value = map_example_struct8{1, 2, 3, 4, 5, 6, 7, 8};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 8;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }

    SECTION("serialize 9 parameter") {
        const auto value = map_example_struct9{1, 2, 3, 4, 5, 6, 7, 8, 9};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 9;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }

    SECTION("serialize 10 parameter") {
        const auto value = map_example_struct10{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 10;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }

    SECTION("serialize 11 parameter") {
        const auto value =
            map_example_struct11{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 11;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }

    SECTION("serialize 12 parameter") {
        const auto value =
            map_example_struct12{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 12;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }

    SECTION("serialize 13 parameter") {
        const auto value =
            map_example_struct13{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 13;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }

    SECTION("serialize 14 parameter") {
        const auto value =
            map_example_struct14{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 14;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }

    SECTION("serialize 15 parameter") {
        const auto value = map_example_struct15{
            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::unordered_map<std::string, int> expected_map;
        constexpr int num_params = 15;
        expected_map.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_map.try_emplace("param" + std::to_string(i), i);
        }

        CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
            expected_map);
    }
}

TEST_CASE("serialize struct into arrays") {
    using msgpack_light::binary;
    using msgpack_light::serialize;
    using msgpack_light_test::array_example_struct1;
    using msgpack_light_test::array_example_struct10;
    using msgpack_light_test::array_example_struct11;
    using msgpack_light_test::array_example_struct12;
    using msgpack_light_test::array_example_struct13;
    using msgpack_light_test::array_example_struct14;
    using msgpack_light_test::array_example_struct15;
    using msgpack_light_test::array_example_struct2;
    using msgpack_light_test::array_example_struct3;
    using msgpack_light_test::array_example_struct4;
    using msgpack_light_test::array_example_struct5;
    using msgpack_light_test::array_example_struct6;
    using msgpack_light_test::array_example_struct7;
    using msgpack_light_test::array_example_struct8;
    using msgpack_light_test::array_example_struct9;

    SECTION("serialize 1 parameter") {
        const auto value = array_example_struct1{1};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 1;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }

    SECTION("serialize 2 parameter") {
        const auto value = array_example_struct2{1, 2};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 2;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }

    SECTION("serialize 3 parameter") {
        const auto value = array_example_struct3{1, 2, 3};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 3;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }

    SECTION("serialize 4 parameter") {
        const auto value = array_example_struct4{1, 2, 3, 4};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 4;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }

    SECTION("serialize 5 parameter") {
        const auto value = array_example_struct5{1, 2, 3, 4, 5};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 5;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }

    SECTION("serialize 6 parameter") {
        const auto value = array_example_struct6{1, 2, 3, 4, 5, 6};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 6;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }

    SECTION("serialize 7 parameter") {
        const auto value = array_example_struct7{1, 2, 3, 4, 5, 6, 7};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 7;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }

    SECTION("serialize 8 parameter") {
        const auto value = array_example_struct8{1, 2, 3, 4, 5, 6, 7, 8};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 8;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }

    SECTION("serialize 9 parameter") {
        const auto value = array_example_struct9{1, 2, 3, 4, 5, 6, 7, 8, 9};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 9;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }

    SECTION("serialize 10 parameter") {
        const auto value =
            array_example_struct10{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 10;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }

    SECTION("serialize 11 parameter") {
        const auto value =
            array_example_struct11{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 11;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }

    SECTION("serialize 12 parameter") {
        const auto value =
            array_example_struct12{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 12;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }

    SECTION("serialize 13 parameter") {
        const auto value =
            array_example_struct13{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 13;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }

    SECTION("serialize 14 parameter") {
        const auto value = array_example_struct14{
            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 14;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }

    SECTION("serialize 15 parameter") {
        const auto value = array_example_struct15{
            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};

        const binary serialized = serialize(value);

        const msgpack::object_handle deserialized = msgpack::unpack(
            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
            reinterpret_cast<const char*>(serialized.data()),
            serialized.size());

        std::vector<int> expected_array;
        constexpr int num_params = 15;
        expected_array.reserve(num_params);
        for (int i = 1; i <= num_params; ++i) {
            expected_array.push_back(i);
        }

        CHECK(deserialized->as<std::vector<int>>() == expected_array);
    }
}
