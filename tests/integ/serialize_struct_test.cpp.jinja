/*
 * Copyright 2024 MusicScience37 (Kenta Kabashima)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * \file
 * \brief Test to serialize struct.
 */

{# The following comment is for the source file generated from this template. #}
/*
 * This source is automatically generated from serialize_struct_test.cpp.jinja.
 * Do not edit this file directly.
 */

#include <string>
#include <unordered_map>
#include <vector>

#include <catch2/catch_test_macros.hpp>
#include <msgpack.hpp>

#include "example_struct.h"
#include "msgpack_light/binary.h"
#include "msgpack_light/serialize.h"

TEST_CASE("serialize struct into maps") {
    using msgpack_light::binary;
    using msgpack_light::serialize;
    {% for i in range(1, max_params + 1) -%}
        using msgpack_light_test::map_example_struct{{i}};
    {% endfor %}

    {% for i in range(1, max_params + 1) %}
        SECTION("serialize {{i}} parameter") {
            const auto value = map_example_struct{{i}}{
                {% for j in range(1, i) -%}
                    {{j}},
                {% endfor -%}
                {{i}}
            };

            const binary serialized = serialize(value);

            const msgpack::object_handle deserialized = msgpack::unpack(
                // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
                reinterpret_cast<const char*>(serialized.data()),
                serialized.size());

            std::unordered_map<std::string, int> expected_map;
            constexpr int num_params = {{i}};
            expected_map.reserve(num_params);
            for (int i = 1; i <= num_params; ++i) {
                expected_map.try_emplace("param" + std::to_string(i), i);
            }

            CHECK(deserialized->as<std::unordered_map<std::string, int>>() ==
                expected_map);
        }
    {% endfor %}
}

TEST_CASE("serialize struct into arrays") {
    using msgpack_light::binary;
    using msgpack_light::serialize;
    {% for i in range(1, max_params + 1) -%}
        using msgpack_light_test::array_example_struct{{i}};
    {% endfor %}

    {% for i in range(1, max_params + 1) %}
        SECTION("serialize {{i}} parameter") {
            const auto value = array_example_struct{{i}}{
                {% for j in range(1, i) -%}
                    {{j}},
                {% endfor -%}
                {{i}}
            };

            const binary serialized = serialize(value);

            const msgpack::object_handle deserialized = msgpack::unpack(
                // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
                reinterpret_cast<const char*>(serialized.data()),
                serialized.size());

            std::vector<int> expected_array;
            constexpr int num_params = {{i}};
            expected_array.reserve(num_params);
            for (int i = 1; i <= num_params; ++i) {
                expected_array.push_back(i);
            }

            CHECK(deserialized->as<std::vector<int>>() == expected_array);
        }
    {% endfor %}
}
