/*
 * Copyright 2024 MusicScience37 (Kenta Kabashima)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * \file
 * \brief Test to serialize struct.
 */

{# The following comment is for the source file generated from this template. #}
/*
 * This source is automatically generated from struct_test.cpp.jinja.
 * Do not edit this file directly.
 */

#include <catch2/catch_test_macros.hpp>

#include "example_struct.h"
#include "msgpack_light/binary.h"
#include "msgpack_light/serialize.h"

TEST_CASE("MSGPACK_LIGHT_STRUCT_MAP") {
    using msgpack_light::binary;
    using msgpack_light::serialize;
    {% for i in range(1, max_params + 1) -%}
        using msgpack_light_test::map_example_struct{{i}};
    {% endfor %}

    {% for i in range(1, max_params + 1) %}
        SECTION("serialize a struct with {{i}} parameter into a map") {
            const auto value = map_example_struct{{i}}{
                {% for j in range(1, i) -%}
                    {{j}},
                {% endfor -%}
                {{i}}
            };
            const auto expected_binary = binary(
                "8{{ '{0:X}'.format(i) }}"  // fixmap with {{i}} pair
                {% for j in range(1, i + 1) -%}
                    "A{{ 5 + get_ascii_string_length(j) }}706172616D{{ convert_to_ascii_string_hex_expression(j) }}"  // "param{{j}}"
                    "{{ '{0:02X}'.format(j) }}"  // {{j}}
                {% endfor -%}
            );

            CHECK(serialize(value) == expected_binary);
        }
    {% endfor %}
}

TEST_CASE("MSGPACK_LIGHT_STRUCT_ARRAY") {
    using msgpack_light::binary;
    using msgpack_light::serialize;
    {% for i in range(1, max_params + 1) -%}
        using msgpack_light_test::array_example_struct{{i}};
    {% endfor %}

    {% for i in range(1, max_params + 1) %}
        SECTION("serialize a struct with {{i}} parameter into an array") {
            const auto value = array_example_struct{{i}}{
                {% for j in range(1, i) -%}
                    {{j}},
                {% endfor -%}
                {{i}}
            };
            const auto expected_binary = binary(
                "9{{ '{0:X}'.format(i) }}"  // fixarray with {{i}} pair
                {% for j in range(1, i + 1) -%}
                    "{{ '{0:02X}'.format(j) }}"  // {{j}}
                {% endfor -%}
            );

            CHECK(serialize(value) == expected_binary);
        }
    {% endfor %}
}
