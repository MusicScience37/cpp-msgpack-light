/*
 * Copyright 2024 MusicScience37 (Kenta Kabashima)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * \file
 * \brief Definition of macros to support serialization of struct types.
 */
#pragma once

{# The following comment is for the header file generated from this template. #}
/*
 * This header is automatically generated from struct_impl.h.jinja.
 * Do not edit this file directly.
 */

#include "msgpack_light/serialization_buffer.h"
#include "msgpack_light/type_support/common.h"
#include "msgpack_light/type_support/fwd.h"

{% for i in range(1, max_params + 1) %}
    /*!
     * \brief Macro to generate class to support serialization of struct with {{i}} parameter into maps.
     *
     * \param STRUCT Type of the struct.
    {% for j in range (1, i + 1) -%}
     * \param PARAM{{j}} Parameter.
    {% endfor -%}
     */
    #define INTERNAL_MSGPACK_LIGHT_STRUCT_MAP{{i}}(STRUCT,                          \
    {% for j in range (1, i + 1) -%}
        PARAM{{j}} {% if j != i %} , {% endif %}                                    \
    {% endfor -%}
    )                                                                               \
        template <>                                                                 \
        struct msgpack_light::type_support::serialization_traits<STRUCT> {        \
        public:                                                                     \
            static void serialize(::msgpack_light::serialization_buffer& buffer,    \
                const STRUCT& value) {                                              \
                buffer.serialize_map_size({{i}});                                   \
    {% for j in range (1, i + 1) -%}
                buffer.serialize(::std::string_view{ #PARAM{{j}} });                \
                buffer.serialize(value.PARAM{{j}});                                 \
    {% endfor -%}
            }                                                                       \
        }
{% endfor %}

{% for i in range(1, max_params + 1) %}
    /*!
     * \brief Macro to generate class to support serialization of struct with {{i}} parameter into arrays.
     *
     * \param STRUCT Type of the struct.
    {% for j in range (1, i + 1) -%}
     * \param PARAM{{j}} Parameter.
    {% endfor -%}
     */
    #define INTERNAL_MSGPACK_LIGHT_STRUCT_ARRAY{{i}}(STRUCT,                          \
    {% for j in range (1, i + 1) -%}
        PARAM{{j}} {% if j != i %} , {% endif %}                                    \
    {% endfor -%}
    )                                                                               \
        template <>                                                                 \
        struct msgpack_light::type_support::serialization_traits<STRUCT> {        \
        public:                                                                     \
            static void serialize(::msgpack_light::serialization_buffer& buffer,    \
                const STRUCT& value) {                                              \
                buffer.serialize_array_size({{i}});                                   \
    {% for j in range (1, i + 1) -%}
                buffer.serialize(value.PARAM{{j}});                                 \
    {% endfor -%}
            }                                                                       \
        }
{% endfor %}
